const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { createClient } = require('@supabase/supabase-js');

// Initialisation du client Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

exports.handler = async (event) => {
    console.log('üîî Fonction getAssociationStripeAccount appel√©e');

    // V√©rifier la m√©thode HTTP
    if (event.httpMethod !== 'POST') {
        console.log('‚ùå M√©thode HTTP non autoris√©e:', event.httpMethod);
        return {
            statusCode: 405,
            body: JSON.stringify({ error: 'M√©thode non autoris√©e' })
        };
    }

    try {
        // R√©cup√©rer les donn√©es de la requ√™te
        const { association_id } = JSON.parse(event.body);
        console.log('üìù Association ID re√ßu:', association_id);

        if (!association_id) {
            console.log('‚ùå ID d\'association manquant');
            return {
                statusCode: 400,
                body: JSON.stringify({ error: 'ID d\'association requis' })
            };
        }

        // R√©cup√©rer les informations du compte Connect depuis Supabase
        console.log('üîÑ Recherche du compte Stripe Connect dans Supabase...');
        const { data: connectAccount, error: connectError } = await supabase
            .from('stripe_connect_accounts')
            .select('*')
            .eq('association_id', association_id)
            .eq('account_status', 'active')
            .single();

        if (connectError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du compte dans Supabase:', connectError);
            return {
                statusCode: 500,
                headers: {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Headers': 'Content-Type',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    error: `Erreur de recherche Supabase: ${connectError.message}`,
                    details: connectError
                })
            };
        }

        if (!connectAccount) {
            console.log('‚ö†Ô∏è Aucun compte Stripe Connect actif trouv√© pour cette association');
            return {
                statusCode: 404,
                headers: {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Headers': 'Content-Type',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    error: 'Aucun compte Stripe Connect actif trouv√© pour cette association',
                    hasAccount: false
                })
            };
        }

        // R√©cup√©rer les informations actuelles du compte depuis Stripe
        console.log('üîÑ R√©cup√©ration des informations du compte depuis Stripe...');
        const account = await stripe.accounts.retrieve(connectAccount.stripe_account_id);

        // Extraire les donn√©es pour le format Swift
        const businessProfile = account.business_profile || {};
        
        // D√©terminer les statuts des capacit√©s
        let cardPaymentsStatus = "pending";
        let transfersStatus = "pending";
        
        if (account.capabilities) {
            cardPaymentsStatus = account.capabilities.card_payments || "pending";
            transfersStatus = account.capabilities.transfers || "pending";
        }

        // R√©ponse format√©e selon l'attente de l'app iOS
        const response = {
            accountId: account.id,
            chargesEnabled: account.charges_enabled || false,
            payoutsEnabled: account.payouts_enabled || false,
            detailsSubmitted: account.details_submitted || false,
            businessType: account.business_type || "non_profit",
            country: account.country || "FR",
            defaultCurrency: account.default_currency || "eur",
            businessProfile: {
                name: businessProfile.name || "",
                url: businessProfile.url || "",
                product_description: businessProfile.product_description || "Billetterie d'√©v√©nements √©tudiants",
                mcc: businessProfile.mcc || "8299"
            },
            metadata: account.metadata || {},
            cardPaymentsStatus: cardPaymentsStatus,
            transfersStatus: transfersStatus,
            hasAccount: true
        };

        console.log('‚úÖ Compte Stripe Connect r√©cup√©r√© avec succ√®s');
        
        return {
            statusCode: 200,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(response)
        };
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration du compte Connect:', {
            message: error.message,
            type: error.type,
            code: error.code
        });

        return {
            statusCode: error.statusCode || 500,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                error: error.message || 'Erreur lors de la r√©cup√©ration du compte Connect',
                type: error.type,
                code: error.code,
                hasAccount: false
            })
        };
    }
}; 