const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { createClient } = require('@supabase/supabase-js');
const fetch = require('node-fetch');

// Initialisation du client Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

exports.handler = async (event) => {
    // V√©rifier la m√©thode HTTP
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            body: JSON.stringify({ error: 'M√©thode non autoris√©e' })
        };
    }

    // R√©cup√©rer la signature du webhook
    const signature = event.headers['stripe-signature'];
    if (!signature) {
        console.error('‚ùå Signature Stripe manquante');
        return {
            statusCode: 400,
            body: JSON.stringify({ error: 'Signature Stripe manquante' })
        };
    }

    let stripeEvent;
    try {
        // V√©rifier la signature Stripe
        stripeEvent = stripe.webhooks.constructEvent(
            event.body,
            signature,
            process.env.STRIPE_WEBHOOK_SECRET
        );
    } catch (error) {
        console.error('‚ùå Erreur de signature du webhook:', error.message);
        return {
            statusCode: 400,
            body: JSON.stringify({ error: `Erreur de signature du webhook: ${error.message}` })
        };
    }

    console.log(`‚úÖ √âv√©nement Stripe re√ßu: ${stripeEvent.type}`);

    // G√©rer les diff√©rents types d'√©v√©nements
    try {
        switch (stripeEvent.type) {
            case 'payment_intent.succeeded':
                return await handlePaymentSucceeded(stripeEvent.data.object);
            case 'payment_intent.payment_failed':
                return await handlePaymentFailed(stripeEvent.data.object);
            default:
                console.log(`‚ö†Ô∏è √âv√©nement non g√©r√©: ${stripeEvent.type}`);
                return {
                    statusCode: 200,
                    body: JSON.stringify({ received: true, type: stripeEvent.type, action: 'ignored' })
                };
        }
    } catch (error) {
        console.error(`‚ùå Erreur lors du traitement de ${stripeEvent.type}:`, error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: `Erreur: ${error.message}` })
        };
    }
};

// Gestion des paiements r√©ussis
async function handlePaymentSucceeded(paymentIntent) {
    console.log('üí∞ Paiement r√©ussi:', paymentIntent.id);
    
    // Extraire les m√©tadonn√©es du paiement
    const metadata = paymentIntent.metadata || {};
    console.log('üìù M√©tadonn√©es du paiement:', metadata);
    
    // V√©rifier si les donn√©es n√©cessaires sont pr√©sentes
    const eventId = metadata.event_id;
    if (!eventId) {
        console.warn('‚ö†Ô∏è ID d\'√©v√©nement manquant dans les m√©tadonn√©es');
        return {
            statusCode: 200,
            body: JSON.stringify({ 
                received: true, 
                action: 'ignored',
                reason: 'Pas d\'ID d\'√©v√©nement'
            })
        };
    }
    
    try {
        // R√©cup√©rer les informations de l'√©v√©nement
        console.log(`üîç R√©cup√©ration des informations de l'√©v√©nement ${eventId}...`);
        const { data: eventData, error: eventError } = await supabase
            .from('events')
            .select('*')
            .eq('id', eventId)
            .single();
            
        if (eventError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'√©v√©nement:', eventError);
            throw new Error(`√âv√©nement non trouv√©: ${eventError.message}`);
        }
        
        // R√©cup√©rer les billets associ√©s √† ce paiement
        console.log(`üé´ Recherche des billets li√©s au paiement ${paymentIntent.id}...`);
        
        // D√©terminer la table √† utiliser en fonction du type d'√©v√©nement
        const isNightclubType = metadata.type === 'nightclub';
        const ticketsTable = isNightclubType ? 'nightclub_tickets' : 'tickets';
        console.log(`üîç Recherche dans la table ${ticketsTable} pour l'√©v√©nement ${eventId} et l'utilisateur ${metadata.user_id}`);
        
        // R√©cup√©rer le dernier ticket cr√©√© pour cet √©v√©nement (approche simplifi√©e)
        const { data: ticketData, error: ticketError } = await supabase
            .from(ticketsTable)
            .select('*')
            .eq('event_id', eventId)
            .eq('user_id', metadata.user_id)
            .order('created_at', { ascending: false })
            .limit(1);
            
        if (ticketError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du ticket:', ticketError);
            throw new Error(`Ticket non trouv√©: ${ticketError.message}`);
        }
        
        if (!ticketData || ticketData.length === 0) {
            console.warn('‚ö†Ô∏è Aucun ticket trouv√© pour cet √©v√©nement et cet utilisateur');
            return {
                statusCode: 200,
                body: JSON.stringify({
                    received: true,
                    action: 'notification_skipped',
                    reason: 'Pas de ticket trouv√©'
                })
            };
        }
        
        const ticket = ticketData[0];
        console.log('üé´ Ticket trouv√©:', ticket.id);
        
        // S'assurer que le ticket a toutes les propri√©t√©s n√©cessaires
        const normalizedTicket = {
            id: ticket.id,
            quantity: ticket.quantity || 1,
            total_amount: ticket.amount / 100 || ticket.total_amount || 0,
            ...ticket
        };
        
        // Construire les informations de l'acheteur
        const buyerInfo = {
            firstName: metadata.customer_first_name || ticket.customer_first_name,
            lastName: metadata.customer_last_name || ticket.customer_last_name,
            email: metadata.customer_email || ticket.customer_email
        };
        
        // Appeler la fonction de notification
        console.log('üì± Envoi de la notification de vente...');
        const notificationPayload = {
            ticket_id: normalizedTicket.id,
            event_id: eventId,
            association_id: eventData.association_id,
            ticket_data: normalizedTicket,
            buyer_info: buyerInfo
        };
        
        console.log('üìù Payload de notification:', JSON.stringify(notificationPayload, null, 2));
        
        // URL de la fonction de notification
        const notificationUrl = "https://bureaudesbureaux.com/.netlify/functions/ticket-sold-notification";
        
        // Envoyer la requ√™te
        const response = await fetch(notificationUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(notificationPayload)
        });
        
        // V√©rifier le statut de la r√©ponse
        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå Erreur de notification (${response.status}):`, errorText);
            throw new Error(`Erreur lors de l'envoi de la notification: ${response.status} - ${errorText}`);
        }
        
        const notificationResult = await response.json();
        console.log('üì± R√©sultat de la notification:', notificationResult);
        
        // Enregistrer l'historique de paiement
        console.log('üíæ Enregistrement de l\'historique de paiement...');
        await supabase
            .from('payment_history')
            .insert({
                payment_intent_id: paymentIntent.id,
                event_id: eventId,
                user_id: metadata.user_id || ticket.user_id,
                amount: paymentIntent.amount,
                currency: paymentIntent.currency,
                status: 'succeeded',
                created_at: new Date(paymentIntent.created * 1000).toISOString(),
                metadata: metadata
            });
        
        return {
            statusCode: 200,
            body: JSON.stringify({
                received: true,
                action: 'notification_sent',
                notification_result: notificationResult
            })
        };
    } catch (error) {
        console.error('‚ùå Erreur lors du traitement du paiement r√©ussi:', error);
        return {
            statusCode: 200, // Toujours retourner 200 pour que Stripe ne r√©-envoie pas le webhook
            body: JSON.stringify({
                received: true,
                error: `Erreur: ${error.message}`
            })
        };
    }
}

// Gestion des paiements √©chou√©s
async function handlePaymentFailed(paymentIntent) {
    console.log('‚ùå Paiement √©chou√©:', paymentIntent.id);
    
    // Extraire les m√©tadonn√©es
    const metadata = paymentIntent.metadata || {};
    const eventId = metadata.event_id;
    
    try {
        // Enregistrer l'√©chec dans les statistiques
        await supabase
            .from('payment_history')
            .insert({
                payment_intent_id: paymentIntent.id,
                event_id: eventId,
                user_id: metadata.user_id,
                amount: paymentIntent.amount,
                currency: paymentIntent.currency,
                status: 'failed',
                error_message: paymentIntent.last_payment_error?.message,
                created_at: new Date(paymentIntent.created * 1000).toISOString(),
                metadata: metadata
            });
            
        return {
            statusCode: 200,
            body: JSON.stringify({
                received: true,
                action: 'payment_failure_recorded'
            })
        };
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'enregistrement de l\'√©chec de paiement:', error);
        return {
            statusCode: 200,
            body: JSON.stringify({
                received: true,
                error: `Erreur: ${error.message}`
            })
        };
    }
} 